import{_ as a,a as t,o,ah as i}from"./chunks/framework.Dpa9-zjT.js";const u=JSON.parse('{"title":"常见问题","description":"","frontmatter":{},"headers":[],"relativePath":"src/introduce/question.md","filePath":"src/introduce/question.md","lastUpdated":1752916373000}'),r={name:"src/introduce/question.md"};function n(s,e,c,l,d,h){return o(),t("div",null,e[0]||(e[0]=[i('<h1 id="常见问题" tabindex="-1">常见问题 <a class="header-anchor" href="#常见问题" aria-label="Permalink to &quot;常见问题&quot;">​</a></h1><h3 id="loadfontface-fail-font-family-or-src-is-null" tabindex="-1">loadFontFace: fail, font-family or src is null <a class="header-anchor" href="#loadfontface-fail-font-family-or-src-is-null" aria-label="Permalink to &quot;loadFontFace: fail, font-family or src is null&quot;">​</a></h3><p><code>HBuilderX</code> 控制台出现 loadFontFace: fail, font-family or src is null，不必在意</p><h3 id="为何使用-ts-后缀而不是-uts" tabindex="-1">为何使用 .ts 后缀而不是 .uts <a class="header-anchor" href="#为何使用-ts-后缀而不是-uts" aria-label="Permalink to &quot;为何使用 .ts 后缀而不是 .uts&quot;">​</a></h3><p>我们选择使用 <code>.ts</code> 文件扩展名而不是 <code>.uts</code> 的原因是:</p><ol><li><code>HBuilderX</code> 会自动将 <code>.ts</code> 文件转换为 <code>.uts</code> 文件</li><li>TypeScript 提供了更完善的类型提示和智能补全功能</li><li>我们在项目中内置了专门用于 VSCode 的类型定义文件，可以获得更好的开发体验</li></ol><h3 id="暂时不推荐使用官方的-vscode-插件" tabindex="-1">暂时不推荐使用官方的 vscode 插件 <a class="header-anchor" href="#暂时不推荐使用官方的-vscode-插件" aria-label="Permalink to &quot;暂时不推荐使用官方的 vscode 插件&quot;">​</a></h3><p>使用官方插件会导致丢失许多重要功能特性，比如 <code>tailwindcss</code> 的智能类型提示，同时可能会出现一些未知的语法错误提示。我们也不建议将 <code>.uvue</code> 文件的语言模式设置为 <code>UVUE</code>。不过,如果您正在开发 <code>uts</code> 插件，那么使用官方提供的 <a href="https://doc.dcloud.net.cn/uni-app-x/tutorial/ls-plugin.html" target="_blank" rel="noreferrer"><code>语言插件</code></a> 是可以的。</p><h3 id="api-service-is-not-running" tabindex="-1">API service is not running <a class="header-anchor" href="#api-service-is-not-running" aria-label="Permalink to &quot;API service is not running&quot;">​</a></h3><p>出现 [cool-eps] API service is not running → <a href="http://127.0.0.1:8001/app/base/comm/eps" target="_blank" rel="noreferrer">http://127.0.0.1:8001/app/base/comm/eps</a> 类似的情况，则 <code>服务端未开启</code> 或者 <a href="/src/guide/config.html"><code>proxy</code></a> 配置的地址不对</p><h3 id="‌cannot-find-a-parameter-with-this-name-base‌" tabindex="-1">‌Cannot find a parameter with this name: base‌ <a class="header-anchor" href="#‌cannot-find-a-parameter-with-this-name-base‌" aria-label="Permalink to &quot;‌Cannot find a parameter with this name: base‌&quot;">​</a></h3><p>编译时出现 ‌⁠error: Cannot find a parameter with this name: base‌，则 <code>服务端未开启</code> 或者 <a href="/src/guide/config.html"><code>proxy</code></a> 配置的地址不对</p><h3 id="please-specify-it-explicitly" tabindex="-1">Please specify it explicitly <a class="header-anchor" href="#please-specify-it-explicitly" aria-label="Permalink to &quot;Please specify it explicitly&quot;">​</a></h3><p>这种错误通常表示在组件或标签上使用的变量缺少明确的类型定义。无法自动推断出变量的具体类型，需要通过显式类型声明来解决</p><h3 id="鸿蒙平台空白或者点击闪退" tabindex="-1">鸿蒙平台空白或者点击闪退 <a class="header-anchor" href="#鸿蒙平台空白或者点击闪退" aria-label="Permalink to &quot;鸿蒙平台空白或者点击闪退&quot;">​</a></h3><p>一般这种情况都是代码有问题，而且看不到错误提示，需要手动排查</p>',16)]))}const f=a(r,[["render",n]]);export{u as __pageData,f as default};
