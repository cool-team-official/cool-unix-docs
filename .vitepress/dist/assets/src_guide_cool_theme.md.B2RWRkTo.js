import{_ as s,a as i,o as a,ah as e}from"./chunks/framework.Dpa9-zjT.js";const g=JSON.parse('{"title":"Theme 主题","description":"","frontmatter":{},"headers":[],"relativePath":"src/guide/cool/theme.md","filePath":"src/guide/cool/theme.md","lastUpdated":1752856966000}'),h={name:"src/guide/cool/theme.md"};function l(n,t,d,k,p,r){return a(),i("div",null,t[0]||(t[0]=[e(`<h1 id="theme-主题" tabindex="-1">Theme 主题 <a class="header-anchor" href="#theme-主题" aria-label="Permalink to &quot;Theme 主题&quot;">​</a></h1><p>提供了完整的主题系统，支持明暗主题切换、自动跟随系统主题等功能。通过简单的 API 调用，您可以轻松实现应用的主题定制和动态切换。</p><p>具体配置方法请参考：<a href="/src/introduce/theme.html">主题配置</a></p><h2 id="核心特性" tabindex="-1">核心特性 <a class="header-anchor" href="#核心特性" aria-label="Permalink to &quot;核心特性&quot;">​</a></h2><ul><li>🌓 <strong>明暗主题切换</strong>：支持 light 和 dark 两种主题模式</li><li>🔄 <strong>自动跟随系统</strong>：可自动检测并跟随系统主题变化（APP 端）</li><li>🎨 <strong>样式获取</strong>：提供便捷的样式和配置获取方法</li><li>📱 <strong>响应式设计</strong>：基于 Vue3 响应式系统，主题变化实时生效</li></ul><h2 id="api" tabindex="-1">API <a class="header-anchor" href="#api" aria-label="Permalink to &quot;API&quot;">​</a></h2><table tabindex="0"><thead><tr><th>名称</th><th>参数</th><th>返回值</th><th>说明</th></tr></thead><tbody><tr><td>isAuto</td><td>-</td><td><code>Ref&lt;boolean&gt;</code></td><td>是否为自动主题模式（跟随系统）</td></tr><tr><td>setIsAuto</td><td><code>enabled: boolean</code></td><td>-</td><td>设置自动主题模式（仅 APP 有效）</td></tr><tr><td>getStyle</td><td><code>key: string</code></td><td><code>string | null</code></td><td>获取当前主题下的页面样式值</td></tr><tr><td>getConfig</td><td><code>key: string</code></td><td><code>string</code></td><td>获取 uniapp 主题配置项</td></tr><tr><td>getTheme</td><td>-</td><td><code>Theme</code></td><td>获取当前主题模式</td></tr><tr><td>theme</td><td>-</td><td><code>Ref&lt;Theme&gt;</code></td><td>当前主题的响应式变量</td></tr><tr><td>isDark</td><td>-</td><td><code>Ref&lt;boolean&gt;</code></td><td>是否为暗色模式的响应式变量</td></tr><tr><td>setTheme</td><td><code>value: Theme</code></td><td>-</td><td>手动设置主题模式</td></tr><tr><td>toggleTheme</td><td>-</td><td>-</td><td>在明暗主题间切换</td></tr><tr><td>initTheme</td><td>-</td><td>-</td><td>初始化主题系统（自动调用）</td></tr></tbody></table><h2 id="类型定义" tabindex="-1">类型定义 <a class="header-anchor" href="#类型定义" aria-label="Permalink to &quot;类型定义&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Theme</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;light&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;dark&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h2 id="判断当前主题" tabindex="-1">判断当前主题 <a class="header-anchor" href="#判断当前主题" aria-label="Permalink to &quot;判断当前主题&quot;">​</a></h2><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;当前主题：{{ currentTheme }}&lt;/</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ts&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { isDark } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;@/cool&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { computed } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;vue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 响应式获取当前主题</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> currentTheme</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> computed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (isDark.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;暗色主题&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;明亮主题&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h2><ul><li><code>setIsAuto</code> 仅在 APP 端生效，H5 和小程序端会忽略此设置</li><li>主题切换会触发页面重新渲染，建议避免在频繁调用的函数中使用</li><li>使用 <code>getStyle</code> 时，确保传入的 key 值在主题配置中存在</li><li>建议在应用启动时调用 <code>initTheme</code> 来初始化主题系统（通常在框架中自动调用）</li></ul>`,13)]))}const c=s(h,[["render",l]]);export{g as __pageData,c as default};
