import{_ as s,a,o as i,a2 as h}from"./chunks/framework.DONvsxB0.js";const E=JSON.parse('{"title":"InputOtp 验证码输入","description":"","frontmatter":{},"headers":[],"relativePath":"src/components/form/input-otp.md","filePath":"src/components/form/input-otp.md","lastUpdated":1752837580000}'),e={name:"src/components/form/input-otp.md"};function n(d,t,p,l,r,o){return i(),a("div",null,t[0]||(t[0]=[h(`<h1 id="inputotp-验证码输入" tabindex="-1">InputOtp 验证码输入 <a class="header-anchor" href="#inputotp-验证码输入" aria-label="Permalink to &quot;InputOtp 验证码输入&quot;">​</a></h1><p><code>cl-input-otp</code> 是一个验证码输入组件，用于输入一次性密码（OTP）或验证码，支持自定义位数、自动聚焦等功能，提供良好的用户输入体验。</p><h2 id="参数" tabindex="-1">参数 <a class="header-anchor" href="#参数" aria-label="Permalink to &quot;参数&quot;">​</a></h2><table tabindex="0"><thead><tr><th>参数</th><th>说明</th><th>类型</th><th>可选值</th><th>默认值</th></tr></thead><tbody><tr><td>pt</td><td>样式穿透配置</td><td><a href="#passthrough">PassThrough</a></td><td>—</td><td>—</td></tr><tr><td>modelValue</td><td>当前输入的验证码值</td><td>string</td><td>—</td><td></td></tr><tr><td>autofocus</td><td>是否自动聚焦</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>length</td><td>验证码位数</td><td>number</td><td>—</td><td>4</td></tr><tr><td>disabled</td><td>是否禁用组件</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>inputType</td><td>输入类型</td><td>string</td><td>&quot;number&quot;</td><td>&#39;number&#39;</td></tr></tbody></table><h2 id="事件" tabindex="-1">事件 <a class="header-anchor" href="#事件" aria-label="Permalink to &quot;事件&quot;">​</a></h2><table tabindex="0"><thead><tr><th>事件名称</th><th>说明</th><th>回调参数</th></tr></thead><tbody><tr><td>done</td><td>验证码输入完成时触发</td><td></td></tr></tbody></table><h2 id="passthrough" tabindex="-1">PassThrough <a class="header-anchor" href="#passthrough" aria-label="Permalink to &quot;PassThrough&quot;">​</a></h2><p>样式穿透配置允许您自定义组件内部各个元素的样式，实现更灵活的外观定制。</p><table tabindex="0"><thead><tr><th>参数</th><th>说明</th><th>类型</th></tr></thead><tbody><tr><td>className</td><td>组件根元素样式</td><td>string</td></tr><tr><td>list</td><td>输入框列表容器配置</td><td><a href="/src/components/pt.html#passthroughprops">PassThroughProps</a></td></tr><tr><td>item</td><td>单个输入框配置</td><td><a href="/src/components/pt.html#passthroughprops">PassThroughProps</a></td></tr><tr><td>cursor</td><td>光标指示器配置</td><td><a href="/src/components/pt.html#passthroughprops">PassThroughProps</a></td></tr><tr><td>value</td><td>输入值显示配置</td><td><a href="/src/components/pt.html#passthroughprops">PassThroughProps</a></td></tr></tbody></table><h2 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h2><h3 id="基础用法" tabindex="-1">基础用法 <a class="header-anchor" href="#基础用法" aria-label="Permalink to &quot;基础用法&quot;">​</a></h3><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">cl-input-otp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">cl-input-otp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="自动聚焦" tabindex="-1">自动聚焦 <a class="header-anchor" href="#自动聚焦" aria-label="Permalink to &quot;自动聚焦&quot;">​</a></h3><p>设置 <code>autofocus</code> 属性，组件渲染后自动聚焦到第一个输入框：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">cl-input-otp</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> autofocus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">cl-input-otp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="自定义位数" tabindex="-1">自定义位数 <a class="header-anchor" href="#自定义位数" aria-label="Permalink to &quot;自定义位数&quot;">​</a></h3><p>通过 <code>length</code> 属性设置验证码位数，适用于不同长度的验证码场景：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">cl-input-otp</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> :length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;6&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">cl-input-otp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="自定义样式" tabindex="-1">自定义样式 <a class="header-anchor" href="#自定义样式" aria-label="Permalink to &quot;自定义样式&quot;">​</a></h3><p>通过 PassThrough 配置自定义组件外观，实现个性化的视觉效果：</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">cl-input-otp</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    item: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      className: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;!bg-sky-100&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    value: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      className: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;!text-sky-700&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">cl-input-otp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div>`,21)]))}const c=s(e,[["render",n]]);export{E as __pageData,c as default};
